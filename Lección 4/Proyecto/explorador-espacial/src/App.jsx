import { useState, useEffect, useRef } from 'react';
import PanelIzquierdo from './components/paneles/PanelIzquierdo';
import PanelCentral from './components/paneles/PanelCentral';
import PanelDerecho from './components/paneles/PanelDerecho';
import FondoEspacial from './components/FondoEspacial';

function App() {
  const [distancia, setDistancia] = useState(0);
  const [combustible, setCombustible] = useState(100);
  const [estadoNave, setEstadoNave] = useState("En tierra");
  const [enVuelo, setEnVuelo] = useState(false);
  const [planetasVisitados, setPlanetasVisitados] = useState(["Tierra"]);
  const [mensajesSimulacion, setMensajesSimulacion] = useState([]);
  const [mensajeAterrizaje, setMensajeAterrizaje] = useState("");
  const [mensajePlaneta, setMensajePlaneta] = useState("");
  const [enTierra, setEnTierra] = useState(false);

  const listaPlanetas = [
    "Mercurio",
    "Venus",
    "Marte",
    "J√∫piter",
    "Saturno",
    "Urano",
    "Neptuno",
    "Plut√≥n, planeta enano del sistema solar",
    "Ceres, planeta enano en el cintur√≥n de asteroides",
    "Eris, planeta enano m√°s all√° de Plut√≥n",
    "Haumea, planeta enano del cintur√≥n de Kuiper",
    "Makemake, planeta enano del cintur√≥n de Kuiper",
    "Luna, sat√©lite de planeta Tierra",
    "Europa, segundo sat√©lite de planeta J√∫piter",
    "Gan√≠medes, sat√©lite m√°s grande de J√∫piter",
    "Tit√°n, sat√©lite de planeta Saturno",
    "Calisto, sat√©lite de planeta J√∫piter",
    "Io, sat√©lite volc√°nico de planeta J√∫piter",
    "Trit√≥n, sat√©lite de planeta Neptuno"
  ];

  // Refs para control ciclo mensajes
  const timeoutRef = useRef(null);
  const planetaVisibleRef = useRef(false);
  const planetaActualRef = useRef("");

  const registrarMensaje = (msg) => {
    setMensajesSimulacion((prev) => [msg, ...prev]);
  };

  const toggleSimulacion = () => {
    setEnTierra(false);

    const nuevoEstado = !enVuelo;
    setEnVuelo(nuevoEstado);

    if (nuevoEstado) setEstadoNave("En √≥rbita");

    registrarMensaje(nuevoEstado ? "üü¢ Simulaci√≥n encendida üü¢" : "üî¥ Simulaci√≥n pausada üî¥");
  };

  const aterrizarDespegar = () => {
    setEnTierra(false);

    if (estadoNave === "En √≥rbita") {
      // Obtener planetas disponibles
      const disponibles = listaPlanetas.filter(
        (p) => !planetasVisitados.includes(p)
      );

      if (disponibles.length === 0) {
        registrarMensaje("‚úÖ ¬°Ya visitaste todos los planetas permitidos! ¬°Vuelve a la Tierra y comienza una nueva misi√≥n!");
        return;
      }

      // Elegir uno aleatorio de los disponibles
      const planetaAleatorio = disponibles[Math.floor(Math.random() * disponibles.length)];

      setEstadoNave("Aterrizando");
      setDistancia((prev) => prev + 50);
      setCombustible((prev) => Math.max(prev - 10, 0));
      registrarMensaje(`‚òÑ Aterrizando en el cuerpo celeste ${planetaAleatorio}...`);

      // Despu√©s de 2 segundos cambiar a "Explorando superficie"
    setTimeout(() => {
      setEstadoNave("Explorando superficie");
    }, 2000);

      // A√±adir a visitados
      setPlanetasVisitados((prev) => [...prev, planetaAleatorio]);

    } else {
      setEstadoNave("En √≥rbita");
      setDistancia((prev) => prev + 50);
      setCombustible((prev) => Math.max(prev - 10, 0));
      registrarMensaje("üöÄ De vuelta en √≥rbita...");
    }
  };

  // Combustible
  useEffect(() => {
    if (combustible === 20) {
      registrarMensaje("‚ö†Ô∏è Combustible al 20%, se recomienda aterrizar y recargar combustible.");
    }
    if (combustible === 10) {
      registrarMensaje("‚ö†Ô∏è Combustible al 10%, aterrizaje inmediato sugerido.");
    }

    if (combustible <= 5 && estadoNave === "En √≥rbita") {
      registrarMensaje("üö® Combustible cr√≠tico, aterrizaje forzoso iniciado...");
      setEstadoNave("Aterrizando");

      // Despu√©s de 3‚Äì5 segundos simula que aterriz√≥ en Tierra
    setTimeout(() => {
      setEstadoNave("Aterrizando"); // por si se perdi√≥ la se√±al de aterrizaje
      setPlanetasVisitados((prev) =>
        prev.includes("Tierra") ? prev : [...prev, "Tierra"]
      );
      setMensajeAterrizaje("üåç Aterrizaje forzoso en Tierra.");
      registrarMensaje("üõ∞Ô∏è Nave aterriz√≥ de emergencia en la Tierra.");
      
      setCombustible(0);
      registrarMensaje("‚ùå Combustible agotado. Nave inmovilizada hasta recarga.");

      setEnTierra(true);
    }, Math.floor(Math.random() * 2000) + 3000);
    }
  }, [combustible, estadoNave]);

  const recargarCombustible = () => {
    if (estadoNave === "Aterrizando") {
      setCombustible(100);
      registrarMensaje("‚õΩ Combustible recargado al 100%, listo para el despegue.");
    }
  };

  const regresarATierra = () => {
    setPlanetasVisitados((prev) =>
      prev.includes("Tierra") ? prev : [...prev, "Tierra"]
    );
    setMensajeAterrizaje("üåç Has regresado a la Tierra.");
    registrarMensaje("üõ∞Ô∏è Misi√≥n regresada a la Tierra.");
    setEnTierra(true); // Activa bot√≥n reset
    setEstadoNave("Aterrizado"); // Bot√≥n ‚ÄúDespegar‚Äù
  };

  const resetearMision = () => {
    setDistancia(0);
    setCombustible(100);
    setEstadoNave("En √≥rbita");
    setEnVuelo(false);
    setPlanetasVisitados(["Tierra"]);
    setMensajesSimulacion([]);
    setMensajeAterrizaje("");
    registrarMensaje("üîÑ Misi√≥n reseteada.");
  };

  // useEffect para el ciclo de mensajes del planeta aleatorio
  useEffect(() => {
    if (!enVuelo || estadoNave !== "En √≥rbita") {
      setMensajePlaneta("");
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
      return;
    }

    const cicloMensaje = () => {
      if (planetaVisibleRef.current) {
        // Mostrar desaparici√≥n del planeta que hab√≠a aparecido
        setMensajePlaneta(`üöÄ El cuerpo celeste ${planetaActualRef.current} ha desaparecido üöÄ`);
        planetaVisibleRef.current = false;

        timeoutRef.current = setTimeout(() => {
          cicloMensaje(); // Despu√©s muestra uno nuevo
        }, Math.floor(Math.random() * 5000) + 5000); // 5‚Äì10 s
      } else {
        // Mostrar aparici√≥n de nuevo planeta
        const planetaAleatorio = listaPlanetas[Math.floor(Math.random() * listaPlanetas.length)];
        planetaActualRef.current = planetaAleatorio; // üîÅ Guardar nombre actual
        setMensajePlaneta(`ü™ê El cuerpo celeste ${planetaAleatorio} ha aparecido ü™ê`);
        planetaVisibleRef.current = true;

        timeoutRef.current = setTimeout(() => {
          cicloMensaje(); // Luego desaparece
        }, Math.floor(Math.random() * 2000) + 3000); // 3‚Äì5 s
      }
    };

    cicloMensaje();

    return () => {
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
    };
  }, [enVuelo, estadoNave]);

  useEffect(() => {
    let intervalo;

    if (enVuelo && estadoNave === "En √≥rbita" && combustible > 0) {
      intervalo = setInterval(() => {
        setDistancia((prev) => prev + 1);
        setCombustible((prev) => Math.max(prev - 1, 0));
      }, 1000); // cada 1 segundo
    }

    return () => clearInterval(intervalo);
  }, [enVuelo, estadoNave, combustible]);

  return (
    <>
      <FondoEspacial />
      <div className="min-h-screen bg-transparent text-white flex gap-4 p-4">
        <PanelIzquierdo
          planetasVisitados={planetasVisitados}
          onRegresar={regresarATierra}
          onResetear={resetearMision}
          mensajeAterrizaje={mensajeAterrizaje}
          habilitarRegresar={enVuelo}
          habilitarResetear={enTierra}
        />

        <PanelCentral
          distancia={distancia}
          combustible={combustible}
          estadoNave={estadoNave}
          mensajeEstado={mensajePlaneta}
          enVuelo={enVuelo}
          onToggleSimulacion={toggleSimulacion}
          onAterrizarDespegar={aterrizarDespegar}
          onRecargarCombustible={recargarCombustible}
          planetasVisitados={planetasVisitados}
          registrarMensaje={registrarMensaje}
        />

        <PanelDerecho
          estadoNave={estadoNave}
          onDespegar={aterrizarDespegar}
          onRecargar={recargarCombustible}
          mensajesSimulacion={mensajesSimulacion}
          habilitarAterrizar={enVuelo}
          enTierra={enTierra}
          combustible={combustible}
          enVuelo={enVuelo}
        />
      </div>
    </>
  );
}

export default App;
