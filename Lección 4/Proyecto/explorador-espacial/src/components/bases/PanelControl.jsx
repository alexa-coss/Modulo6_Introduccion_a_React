import { useState, useEffect, useMemo } from 'react';
import Planeta from './Planeta';

function PanelControl() {
  const [distancia, setDistancia] = useState(0);
  const [combustible, setCombustible] = useState(100);
  const [estadoNave, setEstadoNave] = useState("En √≥rbita");
  const [enVuelo, setEnVuelo] = useState(true);
  const [planetasVisitados, setPlanetasVisitados] = useState(["Tierra"]);
  const [mensajes, setMensajes] = useState([]);

  const listaPlanetas = [ /* Planetas permitidos para realizar aterrizaje */
    "Mercurio",
    "Venus",
    "Marte",
    "J√∫piter",
    "Saturno",
    "Urano",
    "Neptuno",
    "Plut√≥n, planeta enano del sistema solar",
    "Ceres, planeta enano en el cintur√≥n de asteroides",
    "Eris, planeta enano m√°s all√° de Plut√≥n",
    "Haumea, planeta enano del cintur√≥n de Kuiper",
    "Makemake, planeta enano del cintur√≥n de Kuiper",
    "Luna, sat√©lite de planeta Tierra",
    "Europa, segundo sat√©lite de planeta J√∫piter",
    "Gan√≠medes, sat√©lite m√°s grande de J√∫piter",
    "Tit√°n, sat√©lite de planeta Saturno",
    "Calisto, sat√©lite de planeta J√∫piter",
    "Io, sat√©lite volc√°nico de planeta J√∫piter",
    "Trit√≥n, sat√©lite de planeta Neptuno"
  ];

  // Registrar mensajes (desde Planeta.jsx)
  function registrarMensaje(mensaje) {
    setMensajes(prev => [...prev, mensaje]);
  }

  // Simular vuelo (solo si est√° en vuelo)
  useEffect(() => {
    if (!enVuelo) return;

    console.log("¬°El panel est√° listo!"); // Montaje
    registrarMensaje("üü¢ ¬°El panel est√° listo! üü¢");

    const intervalo = setInterval(() => { // Montaje
      // ... (simulaci√≥n de vuelo)
      setDistancia(prev => prev + 1);
      setCombustible(prev => Math.max(prev - 1, 0)); // No baja de cero
    }, 1000);

    return () => {
      clearInterval(intervalo); // Desmontaje
      console.log("El panel se ha apagado."); // Desmontaje
      registrarMensaje("üî¥ El panel se ha apagado. üî¥");
    };
  }, [enVuelo]);

  // Mostrar cuando cambia combustible
  useEffect(() => {
    console.log("¬°Combustible actualizado!");
  }, [combustible]);

  // Aterrizar autom√°ticamente si combustible llega a cero
  useEffect(() => {
    if (combustible === 0 && estadoNave === "En √≥rbita") {
      const planetaEmergencia = elegirPlanetaAleatorio(planetasVisitados);
      if (planetaEmergencia) {
        alert("üö® ¬°Combustible agotado! üõë Aterrizando de emergencia. üõë");
        setEstadoNave("Aterrizando");
        setEnVuelo(false);
        setPlanetasVisitados(prev => [...prev, planetaEmergencia]);
      }
    }
  }, [combustible]);

  // Mostrar alerta cuando el combustible est√© al 20%
  useEffect(() => {
    if (combustible === 20) {
      const mensajeAlerta = "‚ö†Ô∏è Combustible al 20%, se recomienda aterrizar y recargar combustible.";
      registrarMensaje(mensajeAlerta);
    }
  }, [combustible]);

  // Mensaje memorizado
  const mensajeEstado = useMemo(() => {
    return `Estado: ${estadoNave}`;
  }, [estadoNave]);

  /* Elegir planeta aleatorio no visitado */
  function elegirPlanetaAleatorio(visitados) {
    const noVisitados = listaPlanetas.filter(p => !visitados.includes(p)); // Planeta aun no visitados
    if (noVisitados.length === 0) return null; // Ya visit√≥ todos
    const index = Math.floor(Math.random() * noVisitados.length); // Elegir uno al azar
    return noVisitados[index];
  }

  return (
    <>
      <div>
        {/* Encendido / Apagado */}
        <button
          onClick={() => {
            setEnVuelo(prev => !prev);
          }}
        >
          {enVuelo ? "Apagar simulaci√≥n" : "Encender simulaci√≥n"}
        </button>

        <h2>Panel de Control</h2>
        {/* ... (informaci√≥n del panel) */}
        <p>Distancia: {distancia} km</p>
        <p>Combustible: {combustible} %</p>
        <p>{mensajeEstado}</p>

        {/* Aterrizar / Despegar */}
        <button
          onClick={() => {
            if (estadoNave === "Aterrizando") {
              setEstadoNave("En √≥rbita");
              setEnVuelo(true);
            } else {
              const planetaNuevo = elegirPlanetaAleatorio(planetasVisitados);
              if (planetaNuevo) {
                setEstadoNave("Aterrizando");
                setEnVuelo(false);
                setPlanetasVisitados(prev => [...prev, planetaNuevo]);
              } else {
                alert("¬°Ya visitaste todos los planetas permitidos!");
              }
            }
          }}
          disabled={estadoNave === "Aterrizando" && combustible === 0}
        >
          {estadoNave === "Aterrizando" ? "Despegar" : "Aterrizar"}
        </button>

        {/* Recargar combustible */}
        <button
          onClick={() => {
            setCombustible(100);
            const mensajeRecarga = "‚úÖ Combustible al 100%, listo para el despegue.";
            registrarMensaje(mensajeRecarga);
          }}
          disabled={estadoNave === "En √≥rbita"}
        >
          Recargar combustible
        </button>


        {/* Planetas visitados */}
        {planetasVisitados.map((planeta, index) => ( /* Recorrer todos y pasarlos a Planeta en Planeta.jsx */
          <Planeta
            key={index} /* index no pasa como prop (no lo defin√≠) */
            nombre={planeta}
            esInicio={planeta === "Tierra"} /* Pasar el planeta inicial */
            registrarMensaje={registrarMensaje} /* Pasar funci√≥n */
          />
        ))}

        {/* Mostrar mensajes */}
        <h3>Eventos de la misi√≥n:</h3>
        <ul>
          {mensajes.map((msg, i) => (
            <li key={i}>{msg}</li>
          ))}
        </ul>

        {/* Regresar a la Tierra */}
        <button
          onClick={() => {
            setEstadoNave("Regresando a la Tierra");
            setEnVuelo(false);
            registrarMensaje("üõ∞Ô∏è Nave regresando a la Tierra.");
          }}
          disabled={planetasVisitados.includes("Tierra") && estadoNave === "Regresando a la Tierra"}
        >
          Regresar a la Tierra
        </button>

        {/* Resetear misi√≥n */}
        <button
          onClick={() => {
            setDistancia(0);
            setCombustible(100);
            setEstadoNave("En √≥rbita");
            setEnVuelo(true);
            setPlanetasVisitados(["Tierra"]);
            setMensajes([]);
          }}
          disabled={!(planetasVisitados.includes("Tierra") && estadoNave === "Regresando a la Tierra")}
        >
          Resetear misi√≥n
        </button>
      </div>
    </>
  )
}

export default PanelControl
